import os
import time
import threading
import json
import pandas as pd
from flask import Flask, jsonify
from binance.client import Client
from binance.exceptions import BinanceAPIException
import numpy as np
# Importaci√≥n necesaria para el c√°lculo avanzado de MACD y Bollinger.
# Si est√°s ejecutando esto localmente, puedes necesitar 'pip install ta'

# --- 1. CONFIGURACI√ìN Y VARIABLES GLOBALES ---

# Cargar variables de entorno
API_KEY = os.environ.get('BINANCE_API_KEY')
API_SECRET = os.environ.get('BINANCE_API_SECRET')
DRY_RUN = os.environ.get('DRY_RUN', 'true').lower() == 'true'
# NUEVO: Se a√±ade la variable para controlar expl√≠citamente si se usa Testnet.
USE_TESTNET = os.environ.get('USE_TESTNET', 'false').lower() == 'true'


# Par√°metros de la Estrategia (Recuperados de las variables de entorno)
# AHORA SE USA UNA LISTA DE S√çMBOLOS SEPARADOS POR COMAS
# VALOR ACTUALIZADO: TRXUSDT y XRPUSDT por defecto
SYMBOLS_LIST_STR = os.environ.get('SYMBOLS_LIST', 'TRXUSDT,XRPUSDT').replace(" ", "")
SYMBOLS_LIST = [s.strip() for s in SYMBOLS_LIST_STR.split(',') if s.strip()]

INTERVAL = os.environ.get('INTERVAL', '15m')
# üö® VALOR POR DEFECTO ACTUALIZADO A 0.5 (50%) PARA CUMPLIR EL M√çNIMO DE $10.5 CON $22 USD
PCT_OF_BALANCE = float(os.environ.get('PCT_OF_BALANCE', 0.5)) 
SLEEP_SEC = int(os.environ.get('SLEEP_SEC', 300))
MIN_ORDER_USD = float(os.environ.get('MIN_ORDER_USD', 10.5)) # Subido a 10.5 por seguridad
# Nuevo Umbral de Decisi√≥n: La se√±al debe tener al menos este puntaje para ejecutarse.
DECISION_THRESHOLD = 3 # Puntos de decisi√≥n requeridos para una se√±al

# NUEVA CONSTANTE: M√°ximo de reintentos para las llamadas al API de datos
MAX_RETRIES = 5 

# Variables de estado del bot
bot_state = {
    "configuration": {
        "dry_run": DRY_RUN,
        "use_testnet": USE_TESTNET, # <-- A√±adido al estado
        "interval": INTERVAL,
        "min_order_usd": MIN_ORDER_USD,
        "pct_of_balance": PCT_OF_BALANCE,
        "sleep_sec": SLEEP_SEC,
        "symbols_list": SYMBOLS_LIST, # Lista de s√≠mbolos vigilados
        "decision_threshold": DECISION_THRESHOLD
    },
    "current_state": {
        # Balances generales, los balances de activos espec√≠ficos se agregan en tiempo real
        "balances": {"free_USDT": 0, "free_BNB": 0}, 
        "asset_balances": {}, # Almacenar√° balances espec√≠ficos de cada moneda (ej: 'TRX': 500)
        "last_run_utc": None,
        "symbol_data": {} # Almacenar√° la √∫ltima se√±al y puntaje por cada s√≠mbolo
    },
    "trade_history": []
}

# Variable de control del hilo
bot_thread_running = False

# Inicializar Flask
app = Flask(__name__)

# --- 2. INICIALIZACI√ìN DE BINANCE ---

if not API_KEY or not API_SECRET:
    print("‚ùå Faltan BINANCE_API_KEY / BINANCE_API_SECRET en variables de entorno.")
    exit()

try:
    # Conexi√≥n al cliente de Binance
    client = Client(API_KEY, API_SECRET)
    
    # Determinar el entorno de conexi√≥n
    if USE_TESTNET:
        connection_target = "TESTNET (SIMULACI√ìN)"
        # Si USE_TESTNET es verdadero, forzamos la URL de Testnet
        client.API_URL = 'https://testnet.binance.vision/api'
    elif DRY_RUN: 
        connection_target = "PRODUCCI√ìN (SIMULACI√ìN)"
        # Si es DRY_RUN pero no es Testnet, usamos el API de producci√≥n solo para leer datos.
    else:
        connection_target = "PRODUCCI√ìN (DINERO REAL)"
    
    # Verificar conexi√≥n (Esto fallar√° si las claves no coinciden con el entorno)
    info = client.get_account()
    print(f"‚úÖ Conectado a Binance {connection_target}. Estado de la cuenta:", info['canTrade'])
    
except Exception as e:
    # Mensaje de error m√°s detallado sobre la conexi√≥n
    print(f"‚ùå Error al conectar con Binance. Revise credenciales, entorno (real/testnet) y restricciones geogr√°ficas. {e}")
    exit()

# --- 3. FUNCIONES DE ESTRATEGIA (MODIFICADA PARA ACEPTAR SYMBOL) ---

def get_data(symbol):
    """Obtiene datos de velas y calcula indicadores para un s√≠mbolo espec√≠fico, con reintentos."""
    
    # L√≥gica de reintento para mejorar la resiliencia contra errores de conexi√≥n/servidor
    for attempt in range(MAX_RETRIES):
        try:
            print(f"üìä Obteniendo datos de velas para {symbol} en intervalo {INTERVAL}...")
            # Intento de obtener datos de velas
            klines = client.get_historical_klines(symbol, INTERVAL, "500 ago UTC")
            
            # Si tiene √©xito, procesar el DataFrame
            df = pd.DataFrame(klines, columns=['open_time', 'open', 'high', 'low', 'close', 
                                              'volume', 'close_time', 'quote_asset_volume', 
                                              'number_of_trades', 'taker_buy_base_asset_volume', 
                                              'taker_buy_quote_asset_volume', 'ignore'])
            df['close'] = pd.to_numeric(df['close'])

            # --- C√ÅLCULO DE INDICADORES (MISMA L√ìGICA DE IA PONDERADA) ---
            
            # 1. RSI (√çndice de Fuerza Relativa)
            delta = df['close'].diff()
            gain = delta.where(delta > 0, 0)
            loss = -delta.where(delta < 0, 0)
            avg_gain = gain.ewm(com=13, adjust=False).mean()
            avg_loss = loss.ewm(com=13, adjust=False).mean()
            rs = avg_gain / avg_loss
            df['rsi'] = 100 - (100 / (1 + rs))

            # 2. EMAs 
            df['ema9'] = df['close'].ewm(span=9, adjust=False).mean()
            df['ema21'] = df['close'].ewm(span=21, adjust=False).mean()

            # 3. MACD
            df['ema12'] = df['close'].ewm(span=12, adjust=False).mean()
            df['ema26'] = df['close'].ewm(span=26, adjust=False).mean()
            df['macd_line'] = df['ema12'] - df['ema26']
            df['macd_signal'] = df['macd_line'].ewm(span=9, adjust=False).mean()

            # 4. Bandas de Bollinger 
            df['sma20'] = df['close'].rolling(window=20).mean()
            df['stddev'] = df['close'].rolling(window=20).std()
            df['bollinger_upper'] = df['sma20'] + (df['stddev'] * 2)
            df['bollinger_lower'] = df['sma20'] - (df['stddev'] * 2)

            return df # √âxito, retorna el DataFrame y sale del bucle
            
        except Exception as e:
            wait_time = 2 ** attempt # Backoff exponencial (1s, 2s, 4s, 8s...)
            if attempt < MAX_RETRIES - 1:
                print(f"‚ùå Error TEMPORAL al obtener datos para {symbol}: {e}. Reintentando en {wait_time} segundos (Intento {attempt + 1}/{MAX_RETRIES}).")
                time.sleep(wait_time)
            else:
                print(f"‚ùå Error CR√çTICO y persistente al obtener datos para {symbol} despu√©s de {MAX_RETRIES} intentos: {e}. Saltando el par.")
                return None # Fallo final, devuelve None


def get_signal(df, symbol):
# ... (rest of the function is the same)
